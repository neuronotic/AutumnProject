10:29:52 BST] Tim Wood: don't mock the iterator?
[10:29:56 BST] Tim Wood: return a real iterator
[10:30:33 BST] Tim Wood: I think using the cell for two different things is going to significantly complicate your code...
[10:30:51 BST] dazmcg: ok. so keep the logic for ending trips in the vehicle
[10:31:06 BST] Tim Wood: for example, you will have to remember to "-1" the number fo cells to get the length of the journey and all sorts of other complex stuff....
[10:31:34 BST] dazmcg: i have a similar but perhaps more complicated issue with the starting of a trip - I want vehicles to be added to a FIFO queue /waiting/ to enter the junction (either the turn they're created or next, haven't decided)
[10:32:55 BST] Tim Wood: just model it directly?
[10:33:01 BST] dazmcg: i suppose rather than create a type of cell, i could just have junctions equipped with a queue of new journey starters waiting (need the references for 'congestion' figures at the junction)
[10:33:02 BST] dazmcg: directly?
[10:33:11 BST] Tim Wood: what you jsut said
[10:33:28 BST] Tim Wood: if you need a queue of vehicles waitng to enter the junction
[10:33:43 BST] dazmcg: so a vehcile calls .enter  on the jucntion, the junction then sees if a) it's free b) the vehicle is at the head of the new vehicles queue  ...
[10:33:44 BST] Tim Wood: create a queue of vehicles waiting to enter the junction
[10:34:06 BST] Tim Wood: hide details, make abstractions explicit
[10:34:23 BST] dazmcg: in this case what's the abstraction?
[10:34:28 BST] Tim Wood: not necessarily
[10:34:44 BST] Tim Wood: you don't have real vehicles on real tarmac?
[10:35:00 BST] Tim Wood: you could do it that way
[10:35:18 BST] dazmcg: be kind of expensive and require a lot of people to drive them around...
[10:35:30 BST] Tim Wood: I wouldn't say the junction should do that though
[10:36:06 BST] Tim Wood: the queue should maybe do that
[10:36:23 BST] Tim Wood: perhaps you don't clock cars until they have entered the road network
[10:37:05 BST] Tim Wood: you could clock the junction - as they will have to do things like change traffic light states and stuff?
[10:37:12 BST] dazmcg: but the vehicle calls .enter on a Cell type.   well I need to be ablet o acertain how long the vehicles have been waiting to enter the network - kinda like a carpark ajoining a junction, that's still relevent for calculating congestion at junction...
[10:37:36 BST] Tim Wood: then if the junction is empty when it gets clocked it just pulls in the head of the vehical queue
[10:37:47 BST] Tim Wood: and tells that vehicle that it has entered the road network
[10:37:53 BST] dazmcg: ah ok.
[10:38:13 BST] Tim Wood: the vehicle can have a state model
[10:38:25 BST] Tim Wood: at the moment you have three states
[10:38:45 BST] Tim Wood: waiting to start journey -> making journey -> journey completed
[10:38:53 BST] Tim Wood: I would model that explicitly within the vehicle
[10:39:29 BST] Tim Wood: using a state pattern


[11:16:34 BST] Tim Wood: basically yes
[11:16:42 BST] Tim Wood: although I would not implement it like that at all
[11:16:57 BST] Tim Wood: the state of the vehicle shouldn't be exposed
[11:17:02 BST] Tim Wood: its an implementation detail
[11:17:16 BST] Tim Wood: so you shouldn't be able to ask a vehicle for its state
[11:17:28 BST] dazmcg: so how to test it? just check that it can be stepped beyond the iterator?
[11:17:34 BST] dazmcg: *length of iterator..
[11:17:34 BST] Tim Wood: it will just behave differently in each state
[11:17:49 BST] Tim Wood: you can do that
[11:17:55 BST] Tim Wood: or pass a way to sense the state into the constructor
[11:18:00 BST] Tim Wood: or implement the observer pattern
[11:18:27 BST] Tim Wood: so that the observer is notified of importaint events in the vehicle life cycle
[11:18:40 BST] Tim Wood: if you ever find yourself doing instanceof
[11:18:53 BST] Tim Wood: and you are not doing some pretty hardcore meta-programming you have made a mistake


[11:28:34 BST] dazmcg: what if multiple classes implement multiple listener interfaces, with only a few methods from each.  or is that a smell?

[11:29:28 BST] Tim Wood: its generally a smell for classes to implement listener interfaces
[11:29:53 BST] Tim Wood: I would usually create a class (maybe an inner class) specifically to bridge
[11:30:06 BST] Tim Wood: rather than having my main domain objects listening to each other directly
[11:30:30 BST] dazmcg: hmmm.
[11:30:43 BST] Tim Wood: otherwise if you accidently add a method with the same name to both listeners you will be in trouble
[11:31:28 BST] dazmcg: have you any examples in your code?
[11:31:37 BST] dazmcg: of declaring an inner class bridge
[11:32:28 BST] Tim Wood: http://docs.guava-libraries.googlecode.com/git-history/v10.0.1/javadoc/com/google/common/eventbus/package-summary.html
[11:32:32 BST] Tim Wood: erm... maybe
[11:32:35 BST] Tim Wood: but it goes like
[11:33:37 BST] Tim Wood: vehicle.addListener(new VehicleListenerAdapter(){ @Override public void journeyEnded(){ /* do stuff */} });


[14:22:34 BST] dazmcg: i'm trying to intorduce this notion of state with Vehicle. and thinking that whenever particular conditions are met to change the state, creating the new state objects in Vehicle is to be avoided.  Might I maybe pass in a factory in Vehicle's constructor that can create the various state objects with dependencies on Vehicle and Iterator  since those 2 things are needed in the process of processing a particular step? (or i could expose the iterator in vehicle thus only needing to pass the vehicle?

[15:13:33 BST] dazmcg: http://en.wikipedia.org/wiki/State_pattern
"normally only called by classes implementing the State interface" 
in the java example. isn't that leaking info about the implementation since .setState is public?

[15:29:43 BST] Tim Wood: since nothing outside the aggreagte boundary gets a reference to the StateContext
[15:29:54 BST] Tim Wood: so it doesn't matter if its public
[15:30:02 BST] Tim Wood: nothing can call it without a reference to the object

[15:48:49 BST] dazmcg: I cannot figure out how to introduce the state pattern in a way that lets me test it. So might I construct Vehicle with a parameter representing whatever state it starts in, which is a class implementing the state interface.  Any implementers of state interface are constructed with a Factory to create the various states. Then say the vehicle is initialised with a PreState, which when .step is called immediately sets the state to an instance of JourneyInProgressState, which in its .step has to mirror the functionality previously in Vehicle's .step:
                final Cell cell = remainingItinerary.next();
                cell.enter(this);
                location = cell;
                history.stepped();
                logger.info(String.format("Vehicle entered %s", location));
would i bundle this in another method within vehicle that was called by that state?

[15:52:29 BST] Tim Wood: I'm  not sure what you mean by mirror
[15:52:43 BST] Tim Wood: but you have to move the whole method implementation into the appropraite state implementation
[15:52:59 BST] Tim Wood: you don't have to use the "setState()" mechanism
[15:53:00 BST] dazmcg: yeah so those 5 lines currently are what is done in VehicleImpl.step()
[15:53:07 BST] Tim Wood: you can have "step" return the next state
[15:53:14 BST] Tim Wood: so
[15:53:19 BST] Tim Wood: state = state.step()
[15:53:20 BST] dazmcg: yeah i get that
[15:53:31 BST] Tim Wood: then if the state doesn't change just return "this"
[15:53:32 BST] Tim Wood: OK
[15:54:17 BST] dazmcg: but what about testing that a particular state change happens?
[15:54:25 BST] Tim Wood: then you can just test each state of the vehicle seperately, and the out-transitions from each state
[15:54:30 BST] dazmcg: ok
[15:54:54 BST] Tim Wood: so test, under condition X State A returns State B
[15:55:44 BST] Tim Wood: and then in the test for vehicle impl, test that initial state is correct, and that returned states become the next state
[15:55:46 BST] Tim Wood: and you are done
[15:55:50 BST] dazmcg: ok yeah that all makes sense, i'm still a bit confused about how to offload those 5 lines out of vehicle without just creating methods that mirror each of the states functionality. I could create a method on vehcile like .move() ?
[15:56:57 BST] Tim Wood: sure
[15:57:02 BST] dazmcg: but then it'd be publically accessible
[15:57:07 BST] Tim Wood: you mean because the context is in the state?
[15:57:19 BST] Tim Wood: well, usually you create a "context"
[15:57:29 BST] Tim Wood: which is passed to the states when they are created
[15:57:53 BST] Tim Wood: you can even do state.step(context) if you need to
[15:58:18 BST] dazmcg: ok, i guess i was figuring to pass the vehicle obj. as the context
[15:58:22 BST] Tim Wood: and then the move method is on the context, maybe, rather than the vehicle
[15:58:39 BST] Tim Wood: well, the vehicle is a role within the rest of the system
[15:58:52 BST] Tim Wood: its implementation shouldn't leak through that interface

