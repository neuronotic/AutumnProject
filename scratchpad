

---------------

still have to randomise order of vehicles update

-------------

- Still not confident where to use '@assisted'
- difference between 'bind' and 'install' in Guice Module...
- what about matchers / errors?
- my builder for RoadNetwork mixes taking builders and objects...(eg withVehicle(Vehicle vehicle) and withSegment(SegmentBuilder segmentBuilder)

- RoadNetwork, VehicleManager, etc are @Singletons - how to do nested modules with Guice?
Tim: so you can have a top level module that you use to set up the road network
http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Injector.html#createChildInjector%28java.lang.Iterable%3C?%20extends%20com.google.inject.Module%3E%29

http://code.google.com/p/google-guice/wiki/BindingResolution

- is my current impl of RouteFinder recreating roadnetwork each time or is it calling ...?
- ShortestPathRouteFinder needs some work to test it + refactoring.
- when adding vehicles to VehicleManager, the listener adding is causing testing woes/complications...

- refactor out Listener as per Tim's suggestion so that VehicleManager doesn't directly impl. listener.

- TestVehicleImpl.stepMovesVehicleAlongItinerary: doesn't work with isLocatedAt  assertion....why? 
- TestVehicleBuilderImpl etc seems overly complicated?


[REFACTORING/Hackage to fix:]
- Junction requires knowledge of the link that a vehicle is coming from. Made complicated by some vehicles entering the junction from the 'carpark' queue. Current method a complicated tangle.
- link's currently need at least length 1. This is so that link from which vehicle is entering junction can be known. Maybe as vehicle leaves a junction, currentLink set to the link it is doing so via?
- how to treat queue of new vehicles at a junction? like a link? possibly. refactor it into a new type of link? that will simplify the junction logic too.
- junction is lazyily constructed with incomingLinks. This causes initialisation difficulties for things like lights, controller etc...
- different types of flow? eg not just probabilistic, but constant, periodic, - actually this could be achieved by temporal pattern. So add temporal patterns other than constant: masked (with aperiod the length of mask?) + sinusoidal (with period, phase).
- introduce something like a calculator for measures such as congestion? How to do this for different things - like LinkCongestionCalculator, JunctionCongestionCalculator?
- in TestLinkImpl, tests for getting measures is convoluted. probably because smelly impl.

