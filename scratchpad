

---------------
[questions]
- rather than run multiple simulations, can i just run a simulation for longer? This will also harmonise out any transients?

- 



-------------


[REFACTORING/Hackage to fix:]
- Junction requires knowledge of the link that a vehicle is coming from. Made complicated by some vehicles entering the junction from the 'carpark' queue. Current method a complicated tangle.
- link's currently need at least length 1. This is so that link from which vehicle is entering junction can be known. Maybe as vehicle leaves a junction, currentLink set to the link it is doing so via?
- how to treat queue of new vehicles at a junction? like a link? possibly. refactor it into a new type of link? that will simplify the junction logic too.
- junction is lazyily constructed with incomingLinks. This causes initialisation difficulties for things like lights, controller etc...
- different types of flow? eg not just probabilistic, but constant, periodic, - actually this could be achieved by temporal pattern. So add temporal patterns other than constant: masked (with aperiod the length of mask?) + sinusoidal (with period, phase).
- introduce something like a calculator for measures such as congestion? How to do this for different things - like LinkCongestionCalculator, JunctionCongestionCalculator?
- in TestLinkImpl, tests for getting measures is convoluted. probably because smelly impl.
- change NullJunctionController to a strategy and change name to "firstComeFirstServe"?


------------
This has applications beyond traffic routing, in such domains as economics, where our systems of laws can be seen as a kind of control mechanism, and where the coupled behaviour of actors within the financial system evolves to satisfy particular agent constraints in a situated context due to partial information, often leading to major disruptive events such as bubbles and periodic crisis.

------
1) 
- introduce QueueLink (change LinkImpl->RoadLink)
- change link to not have inJ (at least not put in result of cells())

2) modify vehicle (stateContext) to take itinerary, and iterate through links:
- get cells link at a time, when current link cells done, until no more links.
- thus can determine current link of vehicle.

3) introduce flag in cells to determine if to send message or not when departure happens.
- flag set by default on head cell when constructing link?
- message contains: Cell, Timestamp.

4) when time series requested, supply link (and get head cell) or cell as key.

5) simulation builder .withFlow.WithItinerary -> change to just take a sequence of link names (then do the stuff behind the scenes)
